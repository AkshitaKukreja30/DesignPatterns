Structural: Structural design patterns explain how to assemble objects and classes into larger structures, while keeping these structures flexible and efficient.

Decorator: 
Take base and build on top. Simple Coffee + Hazelnut Syrup
Take ICoffee as a dependency and also implemenet ICoffee interface in decorators, adding the functionality in the method declaration provided

Adapter: 
Response -> XML -> JSON
Response -> XML -> CSV
SOURCE -> MEDIATOR -> TARGET
This Mediator is a middle interface and class implemetation where we inject Source and give Target.

Bridge: 
This pattern's intention is to separate an abstraction from its implementation so that both can vary independently. 
This separation allows you to create a bridge between the abstraction and its implementation, making it easier to modify or extend each without affecting the other.

------------------------

Creational: Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.

Factory: The Factory Pattern is a design pattern used to create objects. Instead of directly instantiating objects using the new keyword in your code, 
you use a "factory" class or method to create those objects. 
This helps you delegate the creation process, making your code more flexible and easier to maintain.
Client -> INotificationFactory; NotificationFactory decides which NotificationService to instantiate and creates SMS/ Email Notif


Abstract Factory:
When you need to create families of related objects: Use this pattern when you have multiple groups of products (objects)
that are related and should be created together.

Builder:
Director directs how to assemble the complex obj and Builder segregates it in modular way to allow easy creation of objects


Singleton:
The Singleton Pattern ensures that only one instance of a class is created throughout the application's lifecycle. When using Dependency Injection (DI), we can achieve this behavior by controlling the lifetime of the service.
This would ensure that instance is created only once i.e constructor of that class injected as singleton is created only once.


Prototype:
Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes. Use .Clone()
Example: Instead of recreating the document template from scratch, you clone an existing document object and make necessary modifications (e.g., change the title, add content). The template acts as the prototype that can be cloned and modified as needed.


------------------------------

Behavioural: Behavioral design patterns are concerned with algorithms and the assignment of responsibilities between objects.

Observer :
The Observer pattern is a behavioral design pattern that defines a one-to-many dependency between objects, so that when one object (subject) changes state, all its dependents (observers) are notified and updated automatically.

Chain of Responsibility: 
Middleware in ASP.NET Core can be considered an example of the Chain of Responsibility pattern. Each middleware component can inspect, modify, or short-circuit a request and then either pass it on to the next middleware in the pipeline or terminate the request processing.


----------------------------------